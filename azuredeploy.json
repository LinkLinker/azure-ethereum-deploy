{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "namePrefix": {
            "maxLength": 6,
            "type": "String",
            "defaultValue": "hhbbc",
            "metadata": {
                "description": "String used as a base for naming resources (6 alphanumeric characters or less).  A unique hash is prepended to the string for some resources, while resource-specific information is appended."
            }
        },
        "authType": {
            "defaultValue": "password",
            "allowedValues": [
                "password",
                "sshPublicKey"
            ],
            "type": "String",
            "metadata": {
                "description": "Authorization type for SSH access to VMs"
            }
        },
        "adminUsername": {
            "defaultValue": "gethadmin",
            "type": "String",
            "metadata": {
                "description": "Administrator username of each deployed VM (alphanumeric characters only)"
            }
        },
        "adminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "Administrator password for each deployed VM"
            }
        },
        "adminSSHKey": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "SSH RSA public key file as a string"
            }
        },
        "ethereumAccountPsswd": {
            "type": "SecureString",
            "metadata": {
                "description": "Password used to secure the default Ethereum account that will be generated"
            }
        },
        "ethereumAccountPassphrase": {
            "type": "SecureString",
            "metadata": {
                "description": "Password used to generate the private key associated with the default Ethereum account that is generated.  Consider a password with sufficient randomness to ensure a strong private key"
            }
        },
        "ethereumNetworkID": {
            "defaultValue": 10101010,
            "maxValue": 2147483647,
            "type": "Int",
            "metadata": {
                "description": "Private Ethereum network ID to which to connect (max 9 digit number)"
            }
        },
        "numConsortiumMembers": {
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 12,
            "type": "Int",
            "metadata": {
                "description": "Number of members within the network.  Each member's nodes live in their own subnet."
            }
        },
        "numMiningNodesPerMember": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 15,
            "type": "Int",
            "metadata": {
                "description": "Number of mining nodes to create for each consortium member."
            }
        },
        "mnNodeVMSize": {
            "defaultValue": "Standard_A1",
            "allowedValues": [],
            "type": "String",
            "metadata": {
                "description": "Size of the virtual machine used for mining nodes"
            }
        },
        "mnStorageAccountType": {
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "type": "String",
            "metadata": {
                "description": "Type of storage accounts to create"
            }
        },
        "numTXNodes": {
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 5,
            "type": "Int",
            "metadata": {
                "description": "Number of load balanced transaction nodes"
            }
        },
        "txNodeVMSize": {
            "defaultValue": "Standard_A1",
            "allowedValues": [],
            "type": "String",
            "metadata": {
                "description": "Size of the virtual machine for transaction nodes"
            }
        },
        "txStorageAccountType": {
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "type": "String",
            "metadata": {
                "description": "Type of storage accounts to create"
            }
        },
        "location": {
            "type": "String",
            "defaultValue": "mas"
        },
        "baseUrl": {
            "defaultValue": "https://raw.githubusercontent.com/LinkLinker/azure-ethereum-deploy/master",
            "type": "String",
            "metadata": {
                "description": "The base URL for dependent assets",
                "artifactsBaseUrl": ""
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "artifactsLocationURL": "https://raw.githubusercontent.com/LinkLinker/azure-ethereum-deploy/master/",
        "apiVersionDeployments": "2016-02-01",
        "apiVersionResourcesDeployments": "2015-01-01",
        "apiVersionStorageAccounts": "2016-01-01",
        "apiVersionAvailabilitySets": "2016-03-30",
        "apiVersionNetworkSecurityGroups": "2015-06-15",
        "apiVersionNetworkInterfaces": "2015-06-15",
        "apiVersionVirtualMachines": "2015-06-15",
        "apiVersionVirtualNetworks": "2015-06-15",
        "namingInfix": "[toLower(substring(concat(parameters('namePrefix'), uniqueString(resourceGroup().id)), 0, 9))]",
        "availabilitySetName": "[concat(variables('namingInfix'), 'AvSet')]",
        "httpPort": 80,
        "adminSitePort": 3000,
        "sshPort": 22,
        "sshNATFrontEndStartingPort": 3000,
        "gethRPCPort": 8545,
        "gethIPCPort": 30303,
        "loadBalancerName": "[concat(variables('namingInfix'), '-LB')]",
        "loadBalancerBackendAddressPoolName": "LoadBalancerBackend1",
        "loadBalancerInboundNatRuleNamePrefix": "SSH-VM",
        "numMNNodes": "[mul(parameters('numConsortiumMembers'), parameters('numMiningNodesPerMember'))]",
        "maxVMsPerStorageAcct": 20,
        "mnStorageAcctCount": "[add(div(variables('numMNNodes'), variables('maxVMsPerStorageAcct')), 1)]",
        "mnStorageAcctNames": [
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn0')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn1')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn2')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn3')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn4')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn5')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn6')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn7')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn8')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'mn9')]"
        ],
        "mnVMNamePrefix": "[concat(variables('namingInfix'), '-mn')]",
        "mnNICPrefix": "nic-mn",
        "txStorageAcctName": "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'tx')]",
        "txVMNamePrefix": "[concat(variables('namingInfix'), '-tx')]",
        "txSubnetName": "[concat(uniqueString(concat(resourceGroup().id, concat(variables('namingInfix'), 'subnet')), 'tx'))]",
        "txSubnetPrefix": "10.0.0.0/24",
        "txSubnetRef": "[concat(variables('vnetID'),'/subnets/', variables('txSubnetName'))]",
        "txNIPrefix": "nic-tx",
        "virtualNetworkName": "[concat(variables('namingInfix'), 'vnet')]",
        "txNsgName": "[concat(variables('namingInfix'), 'TXNsg')]",
        "mnNsgName": "[concat(variables('namingInfix'), 'MNNsg')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "addressPrefix": "10.0.0.0/20",
        "mnSubnetNameArray": [
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn0')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn1')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn2')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn3')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn4')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn5')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn6')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn7')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn8')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn9')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn10')]",
            "[concat(uniqueString(resourceGroup().id, variables('namingInfix')), 'snet-mn11')]"
        ],
        "mnSubnetPrefixArray": [
            "10.0.1.0/24",
            "10.0.2.0/24",
            "10.0.3.0/24",
            "10.0.4.0/24",
            "10.0.5.0/24",
            "10.0.6.0/24",
            "10.0.7.0/24",
            "10.0.8.0/24",
            "10.0.9.0/24",
            "10.0.10.0/24",
            "10.0.11.0/24",
            "10.0.12.0/24"
        ],
        "mnSubnetRefArray": [
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[0])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[1])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[2])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[3])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[4])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[5])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[6])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[7])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[8])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[9])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[10])]",
            "[concat(variables('vnetID'),'/subnets/', variables('mnSubnetNameArray')[11])]"
        ],
        "numSubnets": "[add(parameters('numConsortiumMembers'), 1)]",
        "subnetPropertiesArray": [
            {
                "name": "[variables('txSubnetName')]",
                "properties": {
                    "addressPrefix": "[variables('txSubnetPrefix')]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('txNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[0]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[0]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[1]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[1]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[2]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[2]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[3]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[3]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[4]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[4]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[5]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[5]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[6]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[6]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[7]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[7]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[8]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[8]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[9]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[9]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[10]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[10]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            },
            {
                "name": "[variables('mnSubnetNameArray')[11]]",
                "properties": {
                    "addressPrefix": "[variables('mnSubnetPrefixArray')[11]]",
                    "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mnNsgName'))]"
                    }
                }
            }
        ],
        "ubuntuImage": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04-LTS",
            "version": "latest"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('availabilitySetName')]",
            "apiVersion": "[variables('apiVersionAvailabilitySets')]",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "loadBalancerLinkedTemplate",
            "apiVersion": "[variables('apiVersionResourcesDeployments')]",
            "properties": {
                "mode": "incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/loadBalancer.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "dnsHostName": {
                        "value": "[variables('namingInfix')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "frontendPort1": {
                        "value": "[variables('httpPort')]"
                    },
                    "backendPort1": {
                        "value": "[variables('adminSitePort')]"
                    },
                    "frontendPort2": {
                        "value": "[variables('gethRPCPort')]"
                    },
                    "backendPort2": {
                        "value": "[variables('gethRPCPort')]"
                    },
                    "numInboundNATRules": {
                        "value": "[parameters('numTXNodes')]"
                    },
                    "inboundNATRuleFrontendStartingPort": {
                        "value": "[variables('sshNATFrontEndStartingPort')]"
                    },
                    "inboundNATRuleBackendPort": {
                        "value": "[variables('sshPort')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mnNsgName')]",
            "apiVersion": "[variables('apiVersionNetworkSecurityGroups')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "NSG - Mining (MN)"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "block-bootnodes",
                        "properties": {
                            "description": "Block Internet Bootnodes",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "30303",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Deny",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('txNsgName')]",
            "apiVersion": "[variables('apiVersionNetworkSecurityGroups')]",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "NSG - Transaction (TX)"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "allow-ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-geth-rpc",
                        "properties": {
                            "description": "Allow geth RPC",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8545",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 101,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allow-etheradmin",
                        "properties": {
                            "description": "Allow etheradmin web service",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3000",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 102,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "block-bootnodes",
                        "properties": {
                            "description": "Block Internet Bootnodes",
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "30303",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Deny",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "apiVersion": "[variables('apiVersionVirtualNetworks')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": "[take(variables('subnetPropertiesArray'), variables('numSubnets'))]"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('txNsgName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mnNsgName'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "txVMLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/txVMAuth', '-', parameters('authType'), '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersionVirtualMachines": {
                        "value": "[variables('apiVersionVirtualMachines')]"
                    },
                    "apiVersionNetworkInterfaces": {
                        "value": "[variables('apiVersionNetworkInterfaces')]"
                    },
                    "apiVersionStorageAccounts": {
                        "value": "[variables('apiVersionStorageAccounts')]"
                    },
                    "loadBalancerName": {
                        "value": "[variables('loadBalancerName')]"
                    },
                    "loadBalancerBackendAddressPoolName": {
                        "value": "[variables('loadBalancerBackendAddressPoolName')]"
                    },
                    "loadBalancerInboundNatRuleNamePrefix": {
                        "value": "[variables('loadBalancerInboundNatRuleNamePrefix')]"
                    },
                    "txSubnetRef": {
                        "value": "[variables('txSubnetRef')]"
                    },
                    "txVMNamePrefix": {
                        "value": "[variables('txVMNamePrefix')]"
                    },
                    "numTXNodes": {
                        "value": "[parameters('numTXNodes')]"
                    },
                    "txStorageAcctName": {
                        "value": "[variables('txStorageAcctName')]"
                    },
                    "txNIPrefix": {
                        "value": "[variables('txNIPrefix')]"
                    },
                    "storageAccountType": {
                        "value": "[parameters('txStorageAccountType')]"
                    },
                    "availabilitySetName": {
                        "value": "[variables('availabilitySetName')]"
                    },
                    "txNodeVMSize": {
                        "value": "[parameters('txNodeVMSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "adminSSHKey": {
                        "value": "[parameters('adminSSHKey')]"
                    },
                    "ubuntuImage": {
                        "value": "[variables('ubuntuImage')]"
                    },
                    "namingInfix": {
                        "value": "[variables('namingInfix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
                "loadBalancerLinkedTemplate"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "mnVMLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/mnVMAuth', '-', parameters('authType'), '.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "apiVersionVirtualMachines": {
                        "value": "[variables('apiVersionVirtualMachines')]"
                    },
                    "apiVersionNetworkInterfaces": {
                        "value": "[variables('apiVersionNetworkInterfaces')]"
                    },
                    "apiVersionStorageAccounts": {
                        "value": "[variables('apiVersionStorageAccounts')]"
                    },
                    "mnVMNamePrefix": {
                        "value": "[variables('mnVMNamePrefix')]"
                    },
                    "numMNNodes": {
                        "value": "[variables('numMNNodes')]"
                    },
                    "mnNICPrefix": {
                        "value": "[variables('mnNICPrefix')]"
                    },
                    "mnStorageAcctNames": {
                        "value": "[variables('mnStorageAcctNames')]"
                    },
                    "mnStorageAcctCount": {
                        "value": "[variables('mnStorageAcctCount')]"
                    },
                    "mnSubnetRefArray": {
                        "value": "[variables('mnSubnetRefArray')]"
                    },
                    "numConsortiumMembers": {
                        "value": "[parameters('numConsortiumMembers')]"
                    },
                    "storageAccountType": {
                        "value": "[parameters('mnStorageAccountType')]"
                    },
                    "mnNodeVMSize": {
                        "value": "[parameters('mnNodeVMSize')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "adminSSHKey": {
                        "value": "[parameters('adminSSHKey')]"
                    },
                    "ubuntuImage": {
                        "value": "[variables('ubuntuImage')]"
                    },
                    "namingInfix": {
                        "value": "[variables('namingInfix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "vmExtensionLinkedTemplate",
            "apiVersion": "[variables('apiVersionDeployments')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(parameters('baseUrl'), '/nested/vmExtension.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "numBootNodes": {
                        "value": "[parameters('numConsortiumMembers')]"
                    },
                    "txVMNamePrefix": {
                        "value": "[variables('txVMNamePrefix')]"
                    },
                    "numTXNodes": {
                        "value": "[parameters('numTXNodes')]"
                    },
                    "mnVMNamePrefix": {
                        "value": "[variables('mnVMNamePrefix')]"
                    },
                    "numMNNodes": {
                        "value": "[variables('numMNNodes')]"
                    },
                    "artifactsLocationURL": {
                        "value": "[parameters('baseUrl')]"
                    },
                    "adminUsername": {
                        "value": "[parameters('adminUsername')]"
                    },
                    "ethereumAccountPsswd": {
                        "value": "[parameters('ethereumAccountPsswd')]"
                    },
                    "ethereumAccountPassphrase": {
                        "value": "[parameters('ethereumAccountPassphrase')]"
                    },
                    "ethereumNetworkID": {
                        "value": "[parameters('ethereumNetworkID')]"
                    },
                    "gethIPCPort": {
                        "value": "[variables('gethIPCPort')]"
                    },
                    "adminSitePort": {
                        "value": "[variables('adminSitePort')]"
                    },
                    "apiVersionStorageAccounts": {
                        "value": "[variables('apiVersionStorageAccounts')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            },
            "dependsOn": [
                "txVMLinkedTemplate",
                "mnVMLinkedTemplate"
            ]
        }
    ],
    "outputs": {
        "admin-site": {
            "type": "String",
            "value": "[concat('http://', reference('loadBalancerLinkedTemplate').outputs.fqdn.value)]"
        },
        "ethereum-rpc-endpoint": {
            "type": "String",
            "value": "[concat('http://', reference('loadBalancerLinkedTemplate').outputs.fqdn.value, ':', variables('gethRPCPort'))]"
        },
        "ssh-to-first-tx-node": {
            "type": "String",
            "value": "[concat('ssh -p ', variables('sshNATFrontEndStartingPort'), ' ', parameters('adminUsername'), '@', reference('loadBalancerLinkedTemplate').outputs.fqdn.value)]"
        }
    }
}
